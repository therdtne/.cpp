/*******************************************************************************
 * CS 103 Twenty-One (Blackjack) PA
 * Name: Trent Herdtner
 * USC email: therdtne@usc.edu
 * Comments (you want us to know): N/A
 *
 *
 ******************************************************************************/

// Add other #includes if you need
#include <iostream>
#include <cstdlib>

using namespace std;

/* Prototypes */
void shuffle(int cards[]);
void printCard(int id);
int cardValue(int id);
void printHand(int hand[], int numCards);
int getBestScore(int hand[], int numCards);

const int NUM_CARDS = 52;

/**
 * Global arrays to be used as look-up tables, if desired.
 * It is up to you if and how you want to use these 
 */
const char suit[4] = {'H','S','D','C'};
const char* type[13] = 
  {"2","3","4","5","6","7",
   "8","9","10","J","Q","K","A"};
const int value[13] = {2,3,4,5,6,7,8,9,10,10,10,10,11};

/**
 * Should permute the deck of cards, effectively shuffling it.
 * You must use the Fisher-Yates / Durstenfeld shuffle algorithm
 *  described in the assignment writeup.
 */
void shuffle(int cards[])
{
  for (int i=51; i >= 1; i--)
  {
  	int j = rand() % (i+1); // swap cards to shuffle
  	int temp = cards[i];
  	cards[i] = cards[j];
  	cards[j] = temp;	
  }
}

/**
 * Prints the card in a "pretty" format:   "type-suit"
 *  Examples:  K-C  (King of clubs), 2-H (2 of hearts)
 *  Valid Types are: 2,3,4,5,6,7,8,9,10,J,Q,K,A
 *  Valid Suits are: H, D, C, S
 */
void printCard(int id)
{
  char j;

  if (id <= 12) //for suit
  {
  	j = suit[0];
  }
  if (id <= 25 && id > 12) // for suit
  {
  	j = suit[1];
  }
  if(id <= 38 && id > 25) // for suit
  {
  	j = suit[2];
  }
  if (id <= 51 && id > 38) // for suit
  {
  	j = suit[3];
  }

  cout << type[id % 13] << "-" << j;

  //type[id % 13] is for type
}

/**
 * Returns the numeric value of the card.
 *  Should return 11 for an ACE and can then
 *  be adjusted externally based on the sum of the score.
 */
int cardValue(int id)
{
	int j = value[id % 13];

	return j;
}

/**
 * Should print out each card in the hand separated by a space and
 * then print a newline at the end. (\n) 
 * Should use printCard() to print out each card.
 */
void printHand(int hand[], int numCards)
{
	for (int i=0; i<numCards; i++)
	{
		printCard(hand[i]);
		cout << " "; 
	}
	cout << endl;
}

/**
 * Should return the total score of the provided hand.  
 * ACES should be treated as 11s to make the highest possible hand
 *  and only being reduced to 1s as needed to avoid busting.
 */
int getBestScore(int hand[], int numCards)
{
  int total_score = 0;
  int aces = 0;

  for (int i=0; i < numCards; i++)
  {
 	total_score = cardValue(hand[i]) + total_score;
 	
 	if (cardValue(hand[i]) == 11)
 	{
 		aces++;
 	}
  }
  while (total_score > 21 && aces > 0)
  	{
  		total_score -= 10;				// subtract 10 for every ace until score<21
  		aces--;							// if more than one ace in hand
  	}
 

 return total_score;
}

/**
 * Main program logic for the game of 21
 */
int main(int argc, char* argv[])
{
  //---------------------------------------
  // Do not change this code -- Begin
  //---------------------------------------
  if(argc < 2){
    cout << "Error - Please provide the seed value." << endl;
    return 1;
  }
  int seed = atoi(argv[1]);
  srand(seed);

  int cards[52];
  int dhand[9]; // dealer hand
  int phand[9]; // player hand
  //---------------------------------------
  // Do not change this code -- End
  //---------------------------------------

bool play_again=true; 
char choice; //to play or not play again
int number_dealer_cards;
int number_player_cards;
char h_or_s; // hit or stay

do 
{
	for (int i = 0; i<52; i++) //creates 52 cards
	{
		cards[i] = i;
	}

	shuffle(cards); 
	
	for (int i=0; i < 2; i++) //for dealing hands
	{
		phand[i] = cards[2*i];
		dhand[i] = cards[2*i+1]; //+1 so that dealer and player have different cards
	}

	number_player_cards = 2;
	number_dealer_cards = 2;

	cout << "Dealer: " << "? ";
	printCard(dhand[1]);
	cout << endl;
	cout << "Player: ";
	printHand(phand, number_player_cards);

	while (getBestScore(phand,number_player_cards) < 21)
	{
		cout << "Type 'h' to hit and 's' to stay: " << endl;
		cin >> h_or_s; //user chooses to either "hit" or "stay"

		if (h_or_s == 'h')
		{
			phand[number_player_cards] = cards[number_dealer_cards+number_player_cards];
			number_player_cards++;
			cout << "Player: ";
			printHand(phand, number_player_cards);
		}
		else 
		{
			break;
		}
	}
	if (getBestScore(phand, number_player_cards) > 21)
	{
		cout << "Player busts" << endl << "Lose: ";
		cout << getBestScore(phand, number_player_cards);
		cout << " " << getBestScore(dhand, number_dealer_cards) << endl;
	}
	else if (getBestScore(phand, number_player_cards) <= 21)
	{
		while (getBestScore(dhand, number_dealer_cards) < 17) //dealer has to take a card
		{
			dhand[number_dealer_cards] = cards[number_dealer_cards + number_player_cards];
			number_dealer_cards++;
		}

		cout << "Dealer: "; 
		printHand(dhand, number_dealer_cards);

		if (getBestScore(dhand, number_dealer_cards) > 21) //dealer busts
		{
			cout << "Dealer busts!" << endl;
			cout << "Win " << getBestScore(phand, number_player_cards);
			cout << " " << getBestScore(dhand, number_dealer_cards) << endl; 
		}

		else
		{
			if (getBestScore(phand, number_player_cards) > getBestScore(dhand, number_dealer_cards))
			{
				cout << "Win " << getBestScore(phand, number_player_cards);
				cout << " " << getBestScore(dhand, number_dealer_cards) << endl;
			}
			else if (getBestScore(phand, number_player_cards) < getBestScore(dhand, number_dealer_cards))
			{
				cout << "Lose " << getBestScore(phand, number_player_cards);
				cout << " " << getBestScore(dhand, number_dealer_cards) << endl;
			}
			else
			{
				cout << "Tie " << getBestScore(phand, number_player_cards);
				cout << " " << getBestScore(dhand, number_dealer_cards) << endl;
			}
		}
	}

cout << "Play again? [y/n]" << endl;
	cin >> choice;
	
	if (choice != 'y')
	{
		play_again = false;
	}

}
while (play_again == true);




  return 0; 
}

